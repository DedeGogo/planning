{"version":3,"sources":["../node_modules/date-fns/esm/parseISO/index.js","../node_modules/date-fns/esm/addDays/index.js","../node_modules/date-fns/esm/subDays/index.js","DetailJour.js"],"names":["MILLISECONDS_IN_HOUR","MILLISECONDS_IN_MINUTE","DEFAULT_ADDITIONAL_DIGITS","patterns","dateTimeDelimiter","timeZoneDelimiter","timezone","dateRegex","timeRegex","timezoneRegex","parseISO","argument","dirtyOptions","arguments","length","TypeError","options","additionalDigits","toInteger","RangeError","Object","prototype","toString","call","Date","NaN","date","dateStrings","dateString","timeString","array","split","test","substr","token","exec","time","replace","splitDateString","parseYearResult","regex","RegExp","captures","match","year","parseInt","century","restDateString","slice","parseYear","isWeekDate","dayOfYear","parseDateUnit","month","day","week","dayOfWeek","_year","validateWeekDate","isoWeekYear","setUTCFullYear","fourthOfJanuaryDay","getUTCDay","diff","setUTCDate","getUTCDate","dayOfISOWeekYear","daysInMonths","isLeapYearIndex","validateDate","validateDayOfYearDate","Math","max","parseDate","isNaN","offset","timestamp","getTime","hours","parseTimeUnit","minutes","seconds","validateTime","parseTime","timezoneString","sign","_hours","validateTimezone","parseTimezone","fullTime","fullTimeDate","getTimezoneOffsetInMilliseconds","fullTimeDateDiffDay","setDate","getDate","offsetDiff","value","parseFloat","addDays","dirtyDate","dirtyAmount","toDate","amount","subDays","dateOptions","locale","fr","Horaires","horaires","debut","fin","props","formatHeure","heure","format","Badge","variant","Poste","number","poste","Box","py","Heading","fontSize","mr","nom","piaffeur","nomAffichage","Stack","isInline","justify","Text","flex","telephone","Link","href","Icon","name","email","title","notes","PIAFButton","mt","mb","Creneaux","creneaux","spacing","map","creneau","index","key","p","shadow","borderWidth","postes","DetailJour","useParams","currentDate","useQuery","query","variables","response","fetching","textAlign","Spinner","error","message","planning","data","planningDuJour","currentDateObj","parse","Flex","justifyContent","alignItems","as","ReactRouterLink","to","size","labOuvert","Alert","status"],"mappings":"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","file":"static/js/5.335f5997.chunk.js","sourcesContent":["import toInteger from '../_lib/toInteger/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The previous `parse` implementation was renamed to `parseISO`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   parseISO('2016-01-01')\n *   ```\n *\n * - `parseISO` now validates separate date and time values in ISO-8601 strings\n *   and returns `Invalid Date` if the date is invalid.\n *\n *   ```javascript\n *   parseISO('2018-13-32')\n *   //=> Invalid Date\n *   ```\n *\n * - `parseISO` now doesn't fall back to `new Date` constructor\n *   if it fails to parse a string argument. Instead, it returns `Invalid Date`.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nexport default function parseISO(argument, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : toInteger(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var date;\n\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (isNaN(date) || !date) {\n    return new Date(NaN);\n  }\n\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n\n    if (isNaN(time) || time === null) {\n      return new Date(NaN);\n    }\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var fullTime = timestamp + time;\n    var fullTimeDate = new Date(fullTime);\n    offset = getTimezoneOffsetInMilliseconds(fullTimeDate); // Adjust time when it's coming from DST\n\n    var fullTimeDateDiffDay = new Date(fullTime);\n\n    if (offset > 0) {\n      fullTimeDateDiffDay.setDate(fullTimeDate.getDate() + 1);\n    } else {\n      fullTimeDateDiffDay.setDate(fullTimeDate.getDate() - 1);\n    }\n\n    var offsetDiff = getTimezoneOffsetInMilliseconds(fullTimeDateDiffDay) - offset;\n\n    if (offsetDiff > 0) {\n      offset += offsetDiff;\n    }\n  }\n\n  return new Date(timestamp + time + offset);\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString;\n\n  if (/:/.test(array[0])) {\n    dateStrings.date = null;\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex); // Invalid ISO-formatted year\n\n  if (!captures) return {\n    year: null\n  };\n  var year = captures[1] && parseInt(captures[1]);\n  var century = captures[2] && parseInt(captures[2]);\n  return {\n    year: century == null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return null;\n  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string\n\n  if (!captures) return null;\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return null; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n}\n\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n// February is null to handle the leap year (using ||)\n\n\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100;\n}\n\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added\n * @returns {Date} the new date with the days added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * var result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addDays from '../addDays/index.js';\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @description\n * Subtract the specified number of days from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be subtracted\n * @returns {Date} the new date with the days subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * var result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\n\nexport default function subDays(dirtyDate, dirtyAmount) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var amount = toInteger(dirtyAmount);\n  return addDays(dirtyDate, -amount);\n}","import React from \"react\";\nimport { useParams, Link as ReactRouterLink } from \"react-router-dom\";\nimport {\n  Box,\n  Heading,\n  Link,\n  Icon,\n  Spinner,\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n  Text,\n  Stack,\n  Badge,\n  Flex\n} from \"@chakra-ui/core\";\nimport { useQuery } from \"urql\";\nimport { parse, format, parseISO, addDays, subDays } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\n\nimport PIAFButton from \"./PIAFButton\";\n\nconst dateOptions = { locale: fr };\nconst dateFormat = \"yyyy-MM-dd\";\n\nconst PLANNING_JOUR = `\n  query PlanningJour($date: Date!) {\n    planningDuJour(date: $date) {\n     date\n     labOuvert\n     ... on JourOuverture {\n       creneaux {\n         nom\n         postes {\n           nom\n           horaires {\n             debut\n             fin\n           }\n           piaffeur {\n             nom\n             prenom\n             nomAffichage\n             telephone\n             email\n           }\n           notes\n         }\n       }\n     }\n   }\n  }\n`;\n\nconst Horaires = ({ horaires: { debut, fin }, ...props }) => {\n  const formatHeure = heure =>\n    format(parseISO(heure, dateOptions), \"HH'h'mm\", dateOptions);\n\n  return (\n    <Badge variant=\"solid\" {...props}>\n      {formatHeure(debut)}-{formatHeure(fin)}\n    </Badge>\n  );\n};\n\nconst Poste = ({ poste }) => {\n  const asTelUrl = number =>\n    number && `tel:+33${number.replace(/[^\\d]/g, \"\").substr(1)}`;\n\n  return (\n    <Box py={2}>\n      <Heading fontSize=\"l\">\n        <Horaires horaires={poste.horaires} mr={2} />\n        {poste.nom}\n      </Heading>\n      {poste.piaffeur.nomAffichage && (\n        <Stack isInline justify=\"space-between\">\n          <Text flex=\"1\">{poste.piaffeur.nomAffichage}</Text>\n          {poste.piaffeur.telephone ? (\n            <Link flex=\"1\" href={asTelUrl(poste.piaffeur.telephone)}>\n              <Icon name=\"phone\" mr={2} />\n              {poste.piaffeur.telephone}\n            </Link>\n          ) : (\n            <Text flex=\"1\">\n              <Icon name=\"phone\" mr={2} /> N/A\n            </Text>\n          )}\n          {poste.piaffeur.email ? (\n            <Link\n              href={`mailto:${poste.piaffeur.email}`}\n              title={poste.piaffeur.email}\n            >\n              <Icon name=\"email\" />\n            </Link>\n          ) : (\n            <Text>N/A</Text>\n          )}\n        </Stack>\n      )}\n      {poste.notes && <Text>Note : {poste.notes}</Text>}\n\n      {!poste.piaffeur.nomAffichage && (\n        <PIAFButton mt={2} mb={4}>\n          Se positionner sur cette PIAF\n        </PIAFButton>\n      )}\n    </Box>\n  );\n};\n\nconst Creneaux = ({ creneaux }) => (\n  <Stack spacing={8}>\n    {creneaux.map((creneau, index) => (\n      <Box key={index} p={5} shadow=\"md\" borderWidth=\"1px\">\n        <Heading fontSize=\"xl\">{creneau.nom}</Heading>\n        <Stack mt={4} spacing={4}>\n          {creneau.postes.map((poste, index) => (\n            <Poste poste={poste} key={index} />\n          ))}\n        </Stack>\n      </Box>\n    ))}\n  </Stack>\n);\n\nconst DetailJour = () => {\n  const { date } = useParams();\n  const currentDate =\n    date === \"aujourdhui\" ? format(new Date(), dateFormat, dateOptions) : date;\n\n  const [response] = useQuery({\n    query: PLANNING_JOUR,\n    variables: {\n      date: currentDate\n    }\n  });\n\n  if (response.fetching) {\n    return (\n      <Box textAlign=\"center\">\n        <Spinner />\n        <Box>Récupération des informations de la journée…</Box>\n      </Box>\n    );\n  } else if (response.error) {\n    return <span>{response.error.message}</span>;\n  }\n\n  const planning = response.data.planningDuJour;\n  const currentDateObj = parse(\n    currentDate,\n    dateFormat,\n    new Date(),\n    dateOptions\n  );\n  return (\n    <Box>\n      <Box mb={4}>\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Link\n            as={ReactRouterLink}\n            to={format(subDays(currentDateObj, 1), dateFormat)}\n            title=\"Voir le jour précédent\"\n            p={4}\n          >\n            <Icon name=\"arrow-left\" />\n          </Link>\n          <Heading size=\"2xl\">\n            {format(\n              parse(planning.date, dateFormat, new Date(), dateOptions),\n              \"dd/MM/yyyy\",\n              dateOptions\n            )}\n          </Heading>\n          <Link\n            as={ReactRouterLink}\n            to={format(addDays(currentDateObj, 1), dateFormat)}\n            title=\"Voir le jour suivant\"\n            p={4}\n          >\n            <Icon name=\"arrow-right\" />\n          </Link>\n        </Flex>\n\n        <Link as={ReactRouterLink} to=\"/\">\n          <Icon name=\"arrow-back\" mr={2} />\n          Retourner à l'accueil\n        </Link>\n      </Box>\n\n      {planning.labOuvert && <Creneaux creneaux={planning.creneaux} />}\n      {!planning.labOuvert && (\n        <Alert status=\"error\" variant=\"left-accent\">\n          <AlertIcon />\n          <AlertTitle mr={2}>Lab fermé !</AlertTitle>\n          <AlertDescription>\n            Le Lab est fermé à cette date. Veuillez vérifiez la date saisie.\n          </AlertDescription>\n        </Alert>\n      )}\n    </Box>\n  );\n};\n\nexport default DetailJour;\n"],"sourceRoot":""}