{"version":3,"sources":["PIAFButton.js","MePositionner.js"],"names":["NotImplementedYetPIAFButton","children","props","useDisclosure","isOpen","onOpen","onClose","btnRef","React","useRef","Fragment","ref","onClick","placement","finalFocusRef","mt","variant","mr","dateOptions","locale","fr","Horaires","horaires","debut","fin","formatHeure","heure","format","parseISO","Poste","poste","py","fontSize","nomDuCreneau","nom","as","ReactRouterLink","to","date","ml","size","notes","FilterToggle","value","onChange","htmlFor","id","color","defaultIsChecked","Filtres","postes","filters","creneaux","uniq","map","types","startsWith","trim","handleChange","filterFn","e","newFilters","Map","target","checked","delete","set","spacing","p","direction","isWednesday","isThursday","isFriday","isSaturday","creneau","key","type","MePositionner","useQuery","query","response","useState","setFilters","pageSize","setPageSize","useEffect","fetching","textAlign","error","message","data","postesAPourvoir","Date","postesVisibles","take","Array","from","values","reduce","acc","filter","mb","name","index","length"],"mappings":"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","file":"static/js/9.a9e1fc46.chunk.js","sourcesContent":["import React from \"react\";\n\nimport {\n  Text,\n  Button,\n  useDisclosure,\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  DrawerHeader,\n  DrawerBody,\n  DrawerFooter\n} from \"@chakra-ui/core\";\n\nconst NotImplementedYetPIAFButton = ({ children, ...props }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const btnRef = React.useRef();\n\n  return (\n    <React.Fragment>\n      <Button {...props} ref={btnRef} onClick={onOpen}>\n        {children}\n      </Button>\n\n      <Drawer\n        isOpen={isOpen}\n        placement=\"right\"\n        onClose={onClose}\n        finalFocusRef={btnRef}\n      >\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader>Fonctionnalité non disponible</DrawerHeader>\n\n          <DrawerBody>\n            <Text>Cette fonctionnalité n'est pas encore disponible.</Text>\n            <Text>\n              Pour vous positionner sur un créneau pour votre PIAF, merci de\n              vous rendre sur le Planning du Lab (comme historiquement).\n            </Text>\n\n            <Text mt={4}>\n              Nous espérons qu'il sera bientôt possible de tout faire depuis\n              cette page.\n            </Text>\n          </DrawerBody>\n\n          <DrawerFooter>\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\n              Fermer\n            </Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n\nexport default NotImplementedYetPIAFButton;\n","import React, { useState, useEffect } from \"react\";\nimport { Link as ReactRouterLink, useLocation } from \"react-router-dom\";\nimport {\n  Box,\n  Heading,\n  Link,\n  Icon,\n  Spinner,\n  Text,\n  Stack,\n  Badge,\n  FormLabel,\n  Switch,\n  Button\n} from \"@chakra-ui/core\";\nimport { useQuery } from \"urql\";\nimport {\n  format,\n  parseISO,\n  isWednesday,\n  isThursday,\n  isFriday,\n  isSaturday\n} from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\nimport { uniq, take } from \"lodash\";\n\nimport PIAFButton from \"./PIAFButton\";\n\nconst dateOptions = { locale: fr };\nconst dateFormat = \"yyyy-MM-dd\";\n\nconst POSTES_A_POURVOIR = `\n  query PostesAPourvoir {\n    postesAPourvoir {\n      nom\n      nomDuCreneau\n      date\n      horaires {\n        debut\n        fin\n      }\n    }\n  }\n`;\n\nconst Horaires = ({ horaires: { debut, fin }, ...props }) => {\n  const formatHeure = heure =>\n    format(parseISO(heure, dateOptions), \"HH'h'mm\", dateOptions);\n\n  return (\n    <Badge variant=\"solid\" {...props}>\n      {formatHeure(debut)}-{formatHeure(fin)}\n    </Badge>\n  );\n};\n\nconst Poste = ({ poste }) => {\n  return (\n    <Box py={4}>\n      <Heading fontSize=\"xl\">\n        {poste.nomDuCreneau} ({poste.nom})\n      </Heading>\n      <Text fontSize=\"lg\">\n        <Link\n          as={ReactRouterLink}\n          to={`/planning/${format(poste.date, \"yyyy-MM-dd\", dateOptions)}`}\n        >\n          {format(poste.date, \"dd/MM/yyyy\", dateOptions)}\n        </Link>\n        <Horaires horaires={poste.horaires} ml={2} />\n        <PIAFButton size=\"xs\" ml={2}>\n          Se positionner sur cette PIAF\n        </PIAFButton>\n      </Text>\n      {poste.notes && <Text>Note : {poste.notes}</Text>}\n    </Box>\n  );\n};\n\nconst FilterToggle = ({ value, children, onChange }) => (\n  <Box mr={8}>\n    <FormLabel htmlFor={value}>{children}</FormLabel>\n    <Switch\n      id={value}\n      value={value}\n      color=\"teal\"\n      defaultIsChecked\n      onChange={onChange}\n    />\n  </Box>\n);\n\nconst Filtres = ({ postes, filters, onChange }) => {\n  // const location = useLocation(); TODO\n\n  const creneaux = uniq(postes.map(poste => poste.nomDuCreneau));\n  const types = uniq(\n    postes.map(poste =>\n      poste.nom.startsWith(\"Caisse\") ? \"Caisse\" : poste.nom.trim()\n    )\n  );\n\n  const handleChange = filterFn => e => {\n    const newFilters = new Map(filters);\n    const isChecked = e.target.checked;\n    !isChecked\n      ? newFilters.set(e.target.value, filterFn)\n      : newFilters.delete(e.target.value);\n    onChange(newFilters);\n  };\n\n  return (\n    <Stack spacing={3} p={2}>\n      <Box>\n        <Text>Jours de la semaine :</Text>\n        <Stack spacing={4} direction=\"row\">\n          <FilterToggle\n            value=\"mercredi\"\n            onChange={handleChange(poste => isWednesday(poste.date))}\n          >\n            Mercredi\n          </FilterToggle>\n          <FilterToggle\n            value=\"jeudi\"\n            onChange={handleChange(poste => isThursday(poste.date))}\n          >\n            Jeudi\n          </FilterToggle>\n          <FilterToggle\n            value=\"vendredi\"\n            onChange={handleChange(poste => isFriday(poste.date))}\n          >\n            Vendredi\n          </FilterToggle>\n          <FilterToggle\n            value=\"samedi\"\n            onChange={handleChange(poste => isSaturday(poste.date))}\n          >\n            Samedi\n          </FilterToggle>\n        </Stack>\n      </Box>\n\n      <Box>\n        <Text>Créneau :</Text>\n        <Stack spacing={4} direction=\"row\">\n          {creneaux.map(creneau => (\n            <FilterToggle\n              key={creneau}\n              value={`creneau-${creneau}`}\n              onChange={handleChange(poste => poste.nomDuCreneau === creneau)}\n            >\n              {creneau}\n            </FilterToggle>\n          ))}\n        </Stack>\n      </Box>\n\n      <Box>\n        <Text>Type de Poste :</Text>\n        <Stack spacing={4} direction=\"row\">\n          {types.map(type => (\n            <FilterToggle\n              key={type}\n              value={`type-${type}`}\n              onChange={handleChange(poste => poste.nom.startsWith(type))}\n            >\n              {type}\n            </FilterToggle>\n          ))}\n        </Stack>\n      </Box>\n    </Stack>\n  );\n};\n\nconst PAGE_SIZE = 20;\nconst MePositionner = () => {\n  const [response] = useQuery({\n    query: POSTES_A_POURVOIR\n  });\n  const [filters, setFilters] = useState(new Map());\n  const [pageSize, setPageSize] = useState(PAGE_SIZE);\n\n  useEffect(() => setPageSize(PAGE_SIZE), [filters]);\n\n  if (response.fetching) {\n    return (\n      <Box textAlign=\"center\">\n        <Spinner />\n        <Box>\n          Récupération des postes à pourvoir dans les créneaux d'ouverture…\n        </Box>\n      </Box>\n    );\n  } else if (response.error) {\n    return <span>{response.error.message}</span>;\n  }\n\n  const postes = response.data.postesAPourvoir.map(poste => ({\n    ...poste,\n    date: parseISO(poste.date, dateFormat, new Date())\n  }));\n\n  // TODO filter from location\n  const postesVisibles = take(\n    Array.from(filters.values()).reduce(\n      (acc, filter) => acc.filter(poste => !filter(poste)),\n      postes\n    ),\n    pageSize\n  );\n\n  return (\n    <Box>\n      <Box mb={4}>\n        <Heading size=\"2xl\">Se positionner pour une PIAF</Heading>\n\n        <Link as={ReactRouterLink} to=\"/\">\n          <Icon name=\"arrow-back\" mr={2} />\n          Retourner à l'accueil\n        </Link>\n      </Box>\n\n      <Filtres\n        postes={postes}\n        filters={filters}\n        onChange={filters => setFilters(filters)}\n      />\n\n      <Stack mt={4} spacing={4}>\n        {postesVisibles.map((poste, index) => (\n          <Poste poste={poste} key={index} />\n        ))}\n\n        {postesVisibles.length === pageSize && (\n          <Button onClick={() => setPageSize(pageSize => pageSize + PAGE_SIZE)}>\n            Voir plus\n          </Button>\n        )}\n      </Stack>\n    </Box>\n  );\n};\n\nexport default MePositionner;\n"],"sourceRoot":""}