{"version":3,"sources":["Logo/logo.jpg","Logo/index.js","Logo/Logo.js","SplashScreen.js","useAuth.js","LCCTheme.js","AppProviders.js","Accueil.js","Routes.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","props","Image","src","alt","SplashScreen","Flex","bg","minHeight","flexDirection","justifyContent","alignItems","px","border","objectFit","mb","Spinner","size","color","AuthContext","React","createContext","AuthProvider","useSessionStorage","token","setToken","useState","authState","setAuthState","useMutation","response","executeLoginMutation","useEffect","state","decodedToken","jwtDecode","expirationTimer","setTimeout","Math","max","exp","Date","now","clearTimeout","fetching","data","loginChouettos","Provider","value","login","email","password","logout","useAuth","useContext","WebFont","load","google","families","theme","colors","primary","paleyellow","darkyellow","lightbrown","brown","darkbrown","paleviolet","greyblue","greyblue2","violet","palegreen","lightgreen","blue","black","gray","50","100","200","300","400","500","600","700","800","900","fonts","heading","body","mono","client","createClient","url","process","fetchOptions","window","sessionStorage","getItem","headers","authorization","AppProviders","children","ThemeProvider","LCCTheme","CSSReset","Accueil","Box","Heading","Stack","spacing","align","Text","fontSize","Link","as","ReactRouterLink","to","Button","w","MePositionner","lazy","Planning","DetailJour","Routes","useQuery","query","error","Suspense","fallback","py","me","prenom","onClick","path","exact","ResetPasswordLink","isExternal","href","Login","emailInput","useRef","passwordInput","current","focus","mx","my","onSubmit","e","preventDefault","Alert","status","variant","mr","FormControl","isRequired","FormLabel","htmlFor","Input","type","id","aria-describedby","ref","tabIndex","FormHelperText","variantColor","isLoading","loadingText","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","origin","addEventListener","fetch","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9b0321a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.e069865e.jpg\";","import Logo from \"./Logo\";\n\nexport default Logo;\n","import React from \"react\";\nimport { Image } from \"@chakra-ui/core\";\nimport src from \"./logo.jpg\";\n\nconst Logo = props => {\n  return <Image {...props} src={src} alt=\"Logo de La Chouette Coop\" />;\n};\n\nexport default Logo;\n","import React from \"react\";\nimport { Spinner, Flex } from \"@chakra-ui/core\";\nimport Logo from \"./Logo\";\n\nconst SplashScreen = () => (\n  <Flex\n    bg=\"primary\"\n    minHeight=\"100vh\"\n    flexDirection=\"column\"\n    justifyContent=\"center\"\n    alignItems=\"center\"\n    px={4}\n  >\n    <Logo border=\"2px solid white\" objectFit=\"cover\" mb={10} />\n    <Spinner size=\"xl\" color=\"white\" />\n  </Flex>\n);\n\nexport default SplashScreen;\n","import React from \"react\";\nimport { useMutation } from \"urql\";\nimport { useSessionStorage } from \"react-use\";\nimport jwtDecode from \"jwt-decode\";\nimport SplashScreen from \"./SplashScreen\";\n\nexport const TOKEN_STORAGE_KEY = \"token\";\n\n// Auth states\nexport const INITIALIZING = \"initializing\";\nexport const LOGGED_OUT = \"loggedOut\";\nexport const PENDING = \"pending\";\nexport const REFUSED = \"refused\";\nexport const LOGGED_IN = \"loggedIn\";\n\nconst LOGIN = `\n  mutation Login($email: String!, $password: String!) {\n    loginChouettos(input: {\n      email: $email\n      password: $password\n    }) {\n      token\n    }\n  }\n`;\n\nconst getToken = () =>\n  window &&\n  window.sessionStorage &&\n  window.sessionStorage.getItem(TOKEN_STORAGE_KEY);\n\nconst AuthContext = React.createContext();\n\nconst AuthProvider = props => {\n  const [token, setToken] = useSessionStorage(TOKEN_STORAGE_KEY, \"\", true);\n  const [authState, setAuthState] = React.useState(INITIALIZING);\n  const [response, executeLoginMutation] = useMutation(LOGIN);\n\n  React.useEffect(\n    () => {\n      setAuthState(state => {\n        if (state !== LOGGED_IN && token) {\n          return LOGGED_IN;\n        }\n        if ((state === LOGGED_IN || state === INITIALIZING) && !token) {\n          return LOGGED_OUT;\n        }\n        return state;\n      });\n\n      if (!token) {\n        return;\n      }\n\n      const decodedToken = jwtDecode(token);\n      const expirationTimer = setTimeout(\n        () => setToken(\"\"),\n        Math.max(1, decodedToken.exp * 1000 - Date.now())\n      );\n      return () => clearTimeout(expirationTimer);\n    },\n    [token, setToken]\n  );\n\n  React.useEffect(\n    () => {\n      if (!response.fetching && authState !== PENDING) {\n        return;\n      }\n\n      if (response.fetching) {\n        setAuthState(PENDING);\n      } else if (response.data && response.data.loginChouettos.token) {\n        setToken(response.data.loginChouettos.token);\n      } else {\n        setAuthState(REFUSED);\n      }\n    },\n    [response, authState, setToken]\n  );\n\n  if (authState === INITIALIZING) {\n    return <SplashScreen />;\n  }\n\n  const login = ({ email, password }) => {\n    executeLoginMutation({\n      email,\n      password\n    });\n  };\n\n  const logout = () => setToken(\"\");\n\n  return (\n    <AuthContext.Provider\n      value={{ authState, token, login, logout }}\n      {...props}\n    />\n  );\n};\n\nconst useAuth = () => React.useContext(AuthContext);\n\nexport default useAuth;\nexport { AuthProvider, getToken };\n","import { theme } from \"@chakra-ui/core\";\nimport WebFont from \"webfontloader\";\n\nWebFont.load({\n  google: {\n    families: [\"Cabin\", \"Montserrat\", \"Libre Barcode 128 Text\"]\n  }\n});\n\n// see https://github.com/lachouettecoop/styleguide\nconst colors = {\n  primary: \"#445448\",\n\n  // palette LCC\n  paleyellow: \"#f5eeae\",\n  darkyellow: \"#e6c56d\",\n  lightbrown: \"#d8b881\",\n  brown: \"#b88c56\",\n  darkbrown: \"#ba7c40\",\n\n  paleviolet: \"#eee1e9\",\n  greyblue: \"#d3d8d3\",\n  greyblue2: \"#d7d8d9\",\n  violet: \"#c0b9c0\",\n\n  palegreen: \"#d7daba\",\n  lightgreen: \"#c0d29f\",\n  blue: \"#b6cab6\",\n\n  // from https://palx.jxnblk.com/445448\n  black: \"#344237\",\n  gray: {\n    50: \"#ecedeb\",\n    100: \"#d7d9d6\",\n    200: \"#bfc3bd\",\n    300: \"#a3a9a1\",\n    400: \"#7f877c\",\n    500: \"#485444\",\n    600: \"#404b3c\",\n    700: \"#374134\",\n    800: \"#2d342a\",\n    900: \"#1e231d\"\n  }\n};\n\nconst fonts = {\n  heading: \"Montserrat, sans-serif\",\n  body: \"Cabin, sans-serif\",\n  mono: `SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace`\n  // barcode: \"'Libre Barcode 128 Text', cursive\" // duplicated in `<Barcode>`\n};\n\nexport default {\n  ...theme,\n  colors: {\n    ...theme.colors,\n    ...colors\n  },\n  fonts: fonts\n};\n","import React from \"react\";\nimport { ThemeProvider, CSSReset } from \"@chakra-ui/core\";\nimport { Provider as GraphQLProvider, createClient } from \"urql\";\nimport { AuthProvider, getToken } from \"./useAuth\";\nimport LCCTheme from \"./LCCTheme\";\n\nconst client = createClient({\n  url: process.env.REACT_APP_LCC_API_URL,\n  fetchOptions: () => {\n    const token = getToken();\n    return token\n      ? {\n          headers: { authorization: token }\n        }\n      : {};\n  }\n});\n\nconst AppProviders = ({ children }) => (\n  <ThemeProvider theme={LCCTheme}>\n    <CSSReset />\n    <GraphQLProvider value={client}>\n      <AuthProvider>{children}</AuthProvider>\n    </GraphQLProvider>\n  </ThemeProvider>\n);\n\nexport default AppProviders;\n","import React from \"react\";\nimport { Link as ReactRouterLink } from \"react-router-dom\";\nimport { Box, Heading, Link, Button, Stack, Text } from \"@chakra-ui/core\";\n\nconst Accueil = () => {\n  return (\n    <Box>\n      <Box mb={4}>\n        <Heading size=\"2xl\">Bienvenue</Heading>\n      </Box>\n\n      <Stack spacing={4} align=\"stretch\">\n        <Text fontSize=\"xl\">Que voulez-vous faire ?</Text>\n        <Link as={ReactRouterLink} to=\"/me-positionner\">\n          <Button size=\"lg\" w=\"100%\">\n            Se positionner pour une PIAF\n          </Button>\n        </Link>\n        <Link as={ReactRouterLink} to={`/planning/aujourdhui`}>\n          <Button size=\"lg\" w=\"100%\">\n            Voir le planning du jour\n          </Button>\n        </Link>\n        <Link as={ReactRouterLink} to=\"/planning\">\n          <Button size=\"lg\" w=\"100%\">\n            Voir le planning global\n          </Button>\n        </Link>\n      </Stack>\n    </Box>\n  );\n};\n\nexport default Accueil;\n","import React from \"react\";\nimport { Flex, Text, Box, Button } from \"@chakra-ui/core\";\nimport { useQuery } from \"urql\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport useAuth from \"./useAuth\";\nimport SplashScreen from \"./SplashScreen\";\nimport Accueil from \"./Accueil\";\n\nconst MePositionner = React.lazy(() => import(\"./MePositionner\"));\nconst Planning = React.lazy(() => import(\"./Planning\"));\nconst DetailJour = React.lazy(() => import(\"./DetailJour\"));\n\nconst Routes = () => {\n  const { logout } = useAuth();\n  const [response] = useQuery({\n    query: `{\n      me {\n        prenom\n      }\n    }`\n  });\n\n  if (response.fetching) {\n    return <SplashScreen />;\n  } else if (response.error) {\n    return \"Oops, une erreur est survenue. Contactez les personnes en charge SVP.\";\n  }\n\n  return (\n    <React.Suspense fallback={<SplashScreen />}>\n      <Box>\n        <Flex\n          as=\"header\"\n          bg=\"primary\"\n          py={2}\n          px={4}\n          mb={4}\n          justifyContent=\"space-between\"\n        >\n          <Text fontSize=\"xl\" color=\"white\">\n            Bienvenue {response.data.me.prenom} !\n          </Text>\n\n          <Button onClick={logout} size=\"sm\">\n            Se déconnecter\n          </Button>\n        </Flex>\n\n        <Router>\n          <Box px={4}>\n            <Switch>\n              <Route path=\"/\" exact>\n                <Accueil />\n              </Route>\n              <Route path=\"/me-positionner\" exact>\n                <MePositionner />\n              </Route>\n              <Route path=\"/planning\" exact>\n                <Planning />\n              </Route>\n              <Route path=\"/planning/:date\">\n                <DetailJour />\n              </Route>\n            </Switch>\n          </Box>\n        </Router>\n      </Box>\n    </React.Suspense>\n  );\n};\n\nexport default Routes;\n","import React, { useRef, useEffect } from \"react\";\nimport {\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n  Box,\n  Heading,\n  Text,\n  Link,\n  Input,\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Button,\n  Stack\n} from \"@chakra-ui/core\";\nimport useAuth, { REFUSED, PENDING } from \"./useAuth\";\n\nconst ResetPasswordLink = props => (\n  <Link\n    isExternal\n    href=\"https://adminchouettos.lachouettecoop.fr/resetting/request\"\n    {...props}\n  >\n    {props.children || \"réinitialiser votre mot de passe\"}\n  </Link>\n);\n\nconst Login = () => {\n  const { login, authState } = useAuth();\n  const emailInput = useRef(null);\n  const passwordInput = useRef(null);\n\n  useEffect(() => {\n    emailInput.current.focus();\n  }, []);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    login({\n      email: emailInput.current.value,\n      password: passwordInput.current.value\n    });\n  };\n\n  return (\n    <Box w=\"80%\" mx=\"auto\">\n      <Heading as=\"h1\" my={10}>\n        Connexion requise\n      </Heading>\n\n      <Box mb={10}>\n        <Text>Cette application permet de consulter le planning du Lab.</Text>\n        <Text>\n          Elle est réservée aux membres de La Chouette Coop. Veuillez vous\n          connecter avec vos identifiants habituels.\n        </Text>\n      </Box>\n\n      <form onSubmit={handleSubmit}>\n        <Stack spacing={8}>\n          {authState === REFUSED && (\n            <Alert status=\"error\" variant=\"left-accent\">\n              <AlertIcon />\n              <AlertTitle mr={2}>\n                Couple email / mot de passe non reconnu.\n              </AlertTitle>\n              <AlertDescription>\n                Veuillez vérifiez les données transmises ou{\" \"}\n                <ResetPasswordLink />.\n              </AlertDescription>\n            </Alert>\n          )}\n          <FormControl isRequired>\n            <FormLabel htmlFor=\"email\">Adresse email</FormLabel>\n            <Input\n              type=\"email\"\n              id=\"email\"\n              aria-describedby=\"email-helper-text\"\n              ref={emailInput}\n              tabIndex={1}\n            />\n            <FormHelperText id=\"email-helper-text\">\n              L’adresse email fournie lors de votre inscription.\n            </FormHelperText>\n          </FormControl>\n\n          <FormControl isRequired>\n            <FormLabel htmlFor=\"password\">Mot de passe</FormLabel>\n            <Input\n              type=\"password\"\n              id=\"password\"\n              aria-describedby=\"password-helper-text\"\n              ref={passwordInput}\n              tabIndex={2}\n            />\n            <FormHelperText id=\"password-helper-text\">\n              Identique à celui utilisé sur les autres outils de La Chouette\n              Coop. En cas d’oubli, vous pouvez{\" \"}\n              <ResetPasswordLink tabIndex={4} />.\n            </FormHelperText>\n          </FormControl>\n\n          <Button\n            type=\"submit\"\n            variantColor=\"green\"\n            size=\"lg\"\n            isLoading={authState === PENDING}\n            tabIndex={3}\n            loadingText=\"Connexion en cours\"\n          >\n            Se connecter\n          </Button>\n        </Stack>\n      </form>\n    </Box>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\nimport useAuth, { LOGGED_IN } from \"./useAuth\";\nimport Routes from \"./Routes\";\nimport Login from \"./Login\";\n\nconst App = () => {\n  const { authState } = useAuth();\n\n  return authState === LOGGED_IN ? <Routes /> : <Login />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport AppProviders from \"./AppProviders\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <AppProviders>\n    <App />\n  </AppProviders>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}