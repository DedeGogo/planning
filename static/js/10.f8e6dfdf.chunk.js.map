{"version":3,"sources":["Planning.js"],"names":["dateOptions","locale","fr","perWeek","weeks","day","date","parse","Date","key","format","has","set","label","days","week","get","Poste","nom","piaffeur","rest","rempli","Boolean","styles","baseStyles","borderWidth","borderColor","startsWith","borderStyle","borderRadius","borderStylesForSpecialPostes","hasArrow","nomAffichage","placement","w","h","bg","Legende","props","useState","isOpen","setOpen","pasDePiaffeur","onClick","open","size","name","mr","mt","p","color","map","id","isInline","spacing","ml","CreneauxPreview","creneaux","filter","postes","Array","isArray","length","creneau","wrap","poste","Jour","jour","labOuvert","currentMois","dateObj","commonStyleProps","opacity","isSameMonth","isToday","fontSize","flexGrow","as","ReactRouterLink","to","Semaine","dates","debut","min","fin","max","fontWeight","align","flex","Planning","startOfMonth","mois","setMois","useQuery","query","variables","startOfWeek","endOfWeek","endOfMonth","response","fetching","textAlign","error","message","semaines","data","planning","reduce","Map","values","handleNavigateMonth","adder","current","justifyContent","alignItems","icon","aria-label","subMonths","addMonths","semaine"],"mappings":"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","file":"static/js/10.f8e6dfdf.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery } from \"urql\";\nimport {\n  Stack,\n  Flex,\n  Box,\n  Text,\n  Heading,\n  Badge,\n  Link,\n  List,\n  ListItem,\n  Button,\n  Collapse,\n  Icon,\n  Tooltip,\n  IconButton,\n  Spinner\n} from \"@chakra-ui/core\";\nimport { Link as ReactRouterLink } from \"react-router-dom\";\nimport {\n  startOfMonth,\n  startOfWeek,\n  endOfWeek,\n  endOfMonth,\n  format,\n  parse,\n  isToday,\n  addMonths,\n  isSameMonth,\n  subMonths,\n  max,\n  min\n} from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\n\nconst PLANNING = `\n  query Planning($debut: Date!, $fin: Date!) {\n    planning(debut: $debut, fin: $fin) {\n    date\n     labOuvert\n     ... on JourOuverture {\n       creneaux {\n         nom\n         postes {\n           nom\n           horaires {\n             debut\n             fin\n           }\n           piaffeur {\n             nom\n             prenom\n             nomAffichage\n             telephone\n             email\n           }\n           notes\n         }\n       }\n     }\n   }\n  }\n`;\n\nconst dateOptions = { locale: fr };\nconst dateFormat = \"yyyy-MM-dd\";\n\nconst perWeek = (weeks, day) => {\n  const date = parse(day.date, dateFormat, new Date());\n  const key = format(date, \"yy-ww\", dateOptions);\n  if (!weeks.has(key)) {\n    weeks.set(key, {\n      label: format(date, \"ww\", dateOptions),\n      days: []\n    });\n  }\n\n  const week = weeks.get(key);\n  weeks.set(key, {\n    ...week,\n    days: [...week.days, day]\n  });\n  return weeks;\n};\n\n// TODO Définir des constantes qui ont du sens côté GraphQL\nconst borderStylesForSpecialPostes = nom => {\n  const baseStyles = {\n    borderWidth: 2\n  };\n\n  const ghColor = \"yellow.100\";\n  if (nom === \"Grand Hibou\") {\n    return {\n      ...baseStyles,\n      borderColor: ghColor\n    };\n  }\n  if (nom.startsWith(\"Grand Hibou\")) {\n    return {\n      ...baseStyles,\n      borderColor: ghColor,\n      borderStyle: \"dotted\"\n    };\n  }\n\n  if (nom.startsWith(\"Caisse\")) {\n    return {\n      ...baseStyles,\n      borderColor: \"teal.100\",\n      borderRadius: 0\n    };\n  }\n\n  return {\n    ...baseStyles,\n    borderColor: \"transparent\"\n  };\n};\n\nconst Poste = ({ nom, piaffeur, ...rest }) => {\n  const rempli = Boolean(piaffeur.nom);\n  const styles = borderStylesForSpecialPostes(nom);\n\n  return (\n    <Tooltip\n      hasArrow\n      label={rempli ? `${nom} : ${piaffeur.nomAffichage}` : nom}\n      placement=\"top\"\n    >\n      <Box\n        w={4}\n        h={4}\n        bg={rempli ? \"cyan.600\" : \"cyan.200\"}\n        borderRadius=\"lg\"\n        {...styles}\n        {...rest}\n      />\n    </Tooltip>\n  );\n};\n\nconst Legende = props => {\n  const [isOpen, setOpen] = useState(false);\n  const handleToggle = () => setOpen(open => !open);\n  const noms = [\n    \"Grand Hibou\",\n    \"Grand Hibou en formation\",\n    \"Caisse\",\n    \"Chouettos\"\n  ];\n  const piaffeur = { nom: \"toto\" };\n  const pasDePiaffeur = { nom: null };\n  return (\n    <Box {...props}>\n      <Button onClick={handleToggle} size=\"xs\">\n        <Icon name=\"question-outline\" mr={2} />\n        Légende\n      </Button>\n      <Collapse isOpen={isOpen} mt={2} bg=\"primary\" p={2} color=\"white\">\n        <List>\n          {noms.map((nom, id) => (\n            <ListItem key={id}>\n              <Stack isInline spacing={1}>\n                <Poste nom={nom} piaffeur={piaffeur} />\n                <Poste nom={nom} piaffeur={pasDePiaffeur} />\n                <Text ml={2}>{nom}</Text>\n              </Stack>\n            </ListItem>\n          ))}\n        </List>\n      </Collapse>\n    </Box>\n  );\n};\n\nconst CreneauxPreview = ({ creneaux, ...rest }) => {\n  const hasPostes = ({ postes }) => Array.isArray(postes) && postes.length > 0;\n\n  return creneaux.filter(hasPostes).map(creneau => (\n    <Flex wrap=\"wrap\" {...rest}>\n      {creneau.postes.map(poste => (\n        <Poste {...poste} />\n      ))}\n    </Flex>\n  ));\n};\n\nconst Jour = ({\n  jour: { date, labOuvert, creneaux },\n  currentMois,\n  ...rest\n}) => {\n  const dateObj = parse(date, dateFormat, new Date());\n  const commonStyleProps = {\n    opacity: isSameMonth(dateObj, currentMois) ? 1 : 0.5,\n    ...(isToday(dateObj)\n      ? {\n          bg: \"black\"\n        }\n      : {}),\n    ...rest\n  };\n\n  const label = (\n    <Box>\n      <Text fontSize=\"xl\">{format(dateObj, \"dd\", new Date())}</Text>\n    </Box>\n  );\n\n  if (!labOuvert) {\n    return (\n      <Box bg=\"gray.100\" color=\"gray.400\" {...commonStyleProps} flexGrow={1}>\n        {label}\n      </Box>\n    );\n  }\n\n  return (\n    <Box\n      bg=\"primary\"\n      color=\"white\"\n      {...commonStyleProps}\n      flexGrow={3}\n      as={ReactRouterLink}\n      to={`/planning/${date}`}\n    >\n      {label}\n      <CreneauxPreview creneaux={creneaux} mt={4} />\n    </Box>\n  );\n};\n\nconst Semaine = ({ label, days, currentMois, ...rest }) => {\n  const dates = days.map(day => parse(day.date, \"yyyy-MM-dd\", new Date()));\n\n  const debut = format(min(dates), \"dd/MM\");\n  const fin = format(max(dates), \"dd/MM   \");\n  return (\n    <Box {...rest}>\n      <Badge fontWeight=\"bold\">\n        S{label} — Semaine du {debut} au {fin}\n      </Badge>\n      <Stack isInline spacing={0} align=\"stretch\">\n        {days.map(jour => (\n          <Jour\n            key={jour.date}\n            currentMois={currentMois}\n            jour={jour}\n            flex={1}\n            p={2}\n          />\n        ))}\n      </Stack>\n    </Box>\n  );\n};\n\nconst Planning = () => {\n  const [mois, setMois] = useState(startOfMonth(new Date()));\n  const [response] = useQuery({\n    query: PLANNING,\n    variables: {\n      debut: format(startOfWeek(startOfMonth(mois), dateOptions), dateFormat),\n      fin: format(endOfWeek(endOfMonth(mois), dateOptions), dateFormat)\n    }\n  });\n\n  if (response.fetching) {\n    return (\n      <Box textAlign=\"center\">\n        <Spinner />\n        <Box>Récupération des informations du planning…</Box>\n      </Box>\n    );\n  } else if (response.error) {\n    return <span>{response.error.message}</span>;\n  }\n\n  const semaines = [\n    ...response.data.planning.reduce(perWeek, new Map()).values()\n  ];\n\n  const handleNavigateMonth = adder => () =>\n    setMois(current => adder(current, 1));\n\n  return (\n    <Box>\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <IconButton\n          icon=\"arrow-left\"\n          aria-label=\"Voir le mois précédent\"\n          onClick={handleNavigateMonth(subMonths)}\n        />\n        <Heading size=\"2xl\">\n          {format(mois, \"LLLL\", new Date(), dateOptions)}\n        </Heading>\n        <IconButton\n          icon=\"arrow-right\"\n          aria-label=\"Voir le mois suivant\"\n          onClick={handleNavigateMonth(addMonths)}\n        />\n      </Flex>\n      <Link as={ReactRouterLink} to=\"/\">\n        <Icon name=\"arrow-back\" mr={2} />\n        Retourner à l'accueil\n      </Link>\n\n      <Legende mt={4} />\n      <Stack spacing={2} align=\"stretch\">\n        {semaines.map(semaine => (\n          <Semaine key={semaine.label} mt={4} currentMois={mois} {...semaine} />\n        ))}\n      </Stack>\n    </Box>\n  );\n};\n\nexport default Planning;\n"],"sourceRoot":""}